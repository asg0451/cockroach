// Copyright 2019 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.
//
// Processor definitions for distributed SQL APIs. See
// docs/RFCS/distributed_sql.md.
// All the concepts here are "physical plan" concepts.

syntax = "proto2";
// Beware! This package name must not be changed, even though it doesn't match
// the Go package name, because it defines the Protobuf message names which
// can't be changed without breaking backward compatibility.
package cockroach.sql.distsqlrun;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/execinfrapb";

import "jobs/jobspb/jobs.proto";
import "roachpb/data.proto";
import "sql/execinfrapb/data.proto";
import "util/hlc/timestamp.proto";
import "gogoproto/gogo.proto";

// ChangeAggregatorSpec is the specification for a processor that watches for
// changes in a set of spans. Each span may cross multiple ranges.
message ChangeAggregatorSpec {
  reserved 5;

  message Watch {
    reserved 1;

    optional roachpb.Span span = 2 [(gogoproto.nullable) = false];
  }
  repeated Watch watches = 1 [(gogoproto.nullable) = false];

  // Feed is the specification for this changefeed.
  optional cockroach.sql.jobs.jobspb.ChangefeedDetails feed = 2 [(gogoproto.nullable) = false];

  // User who initiated the changefeed. This is used to check access privileges
  // when using FileTable ExternalStorage.
  optional string user_proto = 3 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto"];

  // JobID is the id of this changefeed in the system jobs.
  optional int64 job_id = 4 [
     (gogoproto.nullable) = false,
     (gogoproto.customname) = "JobID",
     (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/jobs/jobspb.JobID"
  ];

  // select is the "select clause" for predicate changefeed.
  optional Expression select = 6 [(gogoproto.nullable) = false];

  // Description is the description of the changefeed. Used for structured logging.
  optional string description = 7 [(gogoproto.nullable) = false];

  // InitialHighWater represents a point in time where all data is known to have
  // been seen for this changefeed job. It is safe to initialize frontier spans
  // at this timestamp upon resuming.
  optional util.hlc.Timestamp initial_high_water = 8;

  // SpanLevelCheckpoint is a map from timestamps to lists of spans. These spans
  // have been resolved to the given timestamp, so it is safe to forward these
  // spans to its corresponding timestamps upon resuming.
  optional cockroach.sql.jobs.jobspb.TimestampSpansMap span_level_checkpoint = 9;

  // ProgressConfig is the configuration for the changefeed's progress tracking.
  optional ChangefeedProgressConfig progress_config = 10;

  // ResolvedSpans contains the resolved spans that should be restored
  // when the changefeed resumes.
  repeated cockroach.sql.jobs.jobspb.ResolvedSpan resolved_spans = 11 [(gogoproto.nullable) = false];
}

// ChangeFrontierSpec is the specification for a processor that receives
// span-level resolved timestamps, track them, and emits the changefeed-level
// resolved timestamp whenever it changes.
message ChangeFrontierSpec {
  // TrackedSpans is the entire span set being watched. Once all these spans
  // have been resolved at a certain timestamp, then it's safe to resolve the
  // changefeed at that timestamp.
  repeated roachpb.Span tracked_spans = 1 [(gogoproto.nullable) = false];

  // Feed is the specification for this changefeed.
  optional cockroach.sql.jobs.jobspb.ChangefeedDetails feed = 2 [(gogoproto.nullable) = false];

  // JobID is the id of this changefeed in the system jobs.
  optional int64 job_id = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "JobID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/jobs/jobspb.JobID"
  ];

  // User who initiated the changefeed. This is used to check access privileges
  // when using FileTable ExternalStorage.
  optional string user_proto = 4 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto"];

  // Description is the description of the changefeed. Used for structured logging.
  optional string description = 5 [(gogoproto.nullable) = false];

  // SpanLevelCheckpoint is a map from timestamps to lists of spans that captures
  // the changefeed progress and is used to initialize the frontier on resume.
  optional cockroach.sql.jobs.jobspb.TimestampSpansMap span_level_checkpoint = 6;

  // ProgressConfig is the configuration for the changefeed's progress tracking.
  optional ChangefeedProgressConfig progress_config = 7;

  // ResolvedSpans contains the resolved spans that should be restored
  // when the changefeed resumes.
  repeated cockroach.sql.jobs.jobspb.ResolvedSpan resolved_spans = 8 [(gogoproto.nullable) = false];
}

// IcebergFileClosed is an in-band message emitted by changefeed aggregators in
// Iceberg mode to signal that a worker has finished writing a data/delete file
// for an epoch. This scaffolding message will be extended in later steps.
message IcebergFileClosed {
  optional string path = 1 [(gogoproto.nullable) = false];
  optional util.hlc.Timestamp epoch_hlc = 2 [(gogoproto.nullable) = false];
  // Fully qualified table name (db.schema.table) for which this file was written.
  optional string table_fqn = 3 [(gogoproto.nullable) = false];
  // Worker/shard identifier (changefeed SQL instance ID).
  optional int32 worker_id = 4 [(gogoproto.nullable) = false];
  // CRDB table schema descriptor version that produced this file.
  optional uint32 schema_id = 5 [(gogoproto.nullable) = false];
  // Iceberg partition spec id in use when writing this file.
  optional int32 spec_id = 6 [(gogoproto.nullable) = false];
  // Kind of file written: data vs equality delete.
  enum Kind {
    DATA = 0;
    EQUALITY_DELETE = 1;
  }
  optional Kind kind = 7 [(gogoproto.nullable) = false];
  // Number of records contained in the file.
  optional int64 record_count = 8 [(gogoproto.nullable) = false];
  // Raw file size in bytes.
  optional int64 file_size_bytes = 9 [(gogoproto.nullable) = false];
  // Partition values encoded as strings per Iceberg spec transforms.
  map<string, string> partition = 10;
  // SHA-256 hash over canonical json of {path,size,record_count,partition}.
  optional bytes file_hash = 11 [(gogoproto.nullable) = false];
}

// ChangefeedProgressConfig is the configuration for the changefeed's progress tracking.
message ChangefeedProgressConfig {
  // PerTableTracking configures whether the changefeed should track
  // span progress on a per-table basis. If configured, any span frontiers
  // created will track spans belonging to different tables separately.
  optional bool per_table_tracking = 1 [(gogoproto.nullable) = false];
  // PerTableProtectedTimestamps configures whether the changefeed should
  // store one protected timestamp per target table. If configured, any
  // new changefeeds created will create one record per table.
  optional bool per_table_protected_timestamps = 2 [(gogoproto.nullable) = false];
}
