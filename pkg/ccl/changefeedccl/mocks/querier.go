// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/ccl/changefeedccl (interfaces: TableBytesQuerier)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	eval "github.com/cockroachdb/cockroach/pkg/sql/sem/eval"
	sessiondata "github.com/cockroachdb/cockroach/pkg/sql/sessiondata"
	gomock "github.com/golang/mock/gomock"
)

// MockTableBytesQuerier is a mock of TableBytesQuerier interface.
type MockTableBytesQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTableBytesQuerierMockRecorder
}

// MockTableBytesQuerierMockRecorder is the mock recorder for MockTableBytesQuerier.
type MockTableBytesQuerierMockRecorder struct {
	mock *MockTableBytesQuerier
}

// NewMockTableBytesQuerier creates a new mock instance.
func NewMockTableBytesQuerier(ctrl *gomock.Controller) *MockTableBytesQuerier {
	mock := &MockTableBytesQuerier{ctrl: ctrl}
	mock.recorder = &MockTableBytesQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableBytesQuerier) EXPECT() *MockTableBytesQuerierMockRecorder {
	return m.recorder
}

// QueryIteratorEx mocks base method.
func (m *MockTableBytesQuerier) QueryIteratorEx(arg0 context.Context, arg1 string, arg2 sessiondata.InternalExecutorOverride, arg3 string, arg4 ...interface{}) (eval.InternalRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryIteratorEx", varargs...)
	ret0, _ := ret[0].(eval.InternalRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIteratorEx indicates an expected call of QueryIteratorEx.
func (mr *MockTableBytesQuerierMockRecorder) QueryIteratorEx(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIteratorEx", reflect.TypeOf((*MockTableBytesQuerier)(nil).QueryIteratorEx), varargs...)
}
